{
  "buckets": [
    {
      "Name": "extras",
      "Source": "https://github.com/ScoopInstaller/Extras"
    },
    {
      "Name": "main",
      "Source": "https://github.com/ScoopInstaller/Main"
    },
    {
      "Name": "versions",
      "Source": "https://github.com/ScoopInstaller/Versions"
    },
    {
      "Name": "yak1ex",
      "Source": "https://github.com/yak1ex/scoop-bucket"
    }
  ],
  "apps": [
    {
      "Info": "",
      "Source": "main",
      "Name": "7zip"
    },
    {
      "Info": "",
      "Source": "yak1ex",
      "Name": "afxbkmk"
    },
    {
      "Info": "",
      "Source": "yak1ex",
      "Name": "afxw"
    },
    {
      "Info": "",
      "Source": "yak1ex",
      "Name": "amkln"
    },
    {
      "Info": "",
      "Source": "yak1ex",
      "Name": "amksc"
    },
    {
      "Info": "",
      "Source": "extras",
      "Name": "autohotkey"
    },
    {
      "Info": "",
      "Source": "yak1ex",
      "Name": "bzeditor"
    },
    {
      "Info": "",
      "Source": "yak1ex",
      "Name": "cmigemo"
    },
    {
      "Info": "",
      "Source": "main",
      "Name": "dark"
    },
    {
      "Info": "",
      "Source": "yak1ex",
      "Name": "firefilecopy"
    },
    {
      "Info": "",
      "Source": "main",
      "Name": "ffmpeg"
    },
    {
      "Info": "",
      "Source": "main",
      "Name": "git"
    },
    {
      "Info": "",
      "Source": "main",
      "Name": "git-lfs"
    },
    {
      "Info": "",
      "Source": "yak1ex",
      "Name": "hidemaru"
    },
    {
      "Info": "",
      "Source": "extras",
      "Name": "irfanview"
    },
    {
      "Info": "",
      "Source": "main",
      "Name": "jq"
    },
     {
      "Info": "",
      "Source": "extras",
      "Name": "mambaforge"
    },
    {
      "Info": "",
      "Source": "extras",
      "Name": "manictime"
    },
    {
      "Info": "",
      "Source": "extras",
      "Name": "mpc-hc-fork"
    },
    {
      "Info": "",
      "Source": "extras",
      "Name": "notepadplusplus"
    },
    {
      "Info": "",
      "Source": "main",
      "Name": "nvm"
    },
    {
      "Info": "",
      "Source": "extras",
      "Name": "powertoys"
    },
    {
      "Info": "",
      "Source": "extras",
      "Name": "sysinternals"
    },
    {
      "Info": "",
      "Source": "versions",
      "Name": "windows-terminal-preview"
    },
    {
      "Info": "",
      "Source": "extras",
      "Name": "winmerge"
    },
    {
      "Info": "",
      "Source": "yak1ex",
      "Name": "yaksetup"
    }
  ],
  "pre_install": [
    "# for mambaforge, enable long paths, if necessary ",
    "if (-not (Get-ItemProperty -Path registry::HKLM\\SYSTEM\\CurrentControlSet\\Control\\FileSystem).LongPathsEnabled) {",
    "  $temp = New-TemporaryFile",
    "  $reg = $temp.FullName -replace '.tmp$', '.reg'",
    "  \"Windows Registry Editor Version 5.00\" | Out-File $reg",
    "  \"\" | Out-File $reg -Append",
    "  \"[HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Control\\FileSystem]\" | Out-File $reg -Append",
    "  \"`\"LongPathsEnabled`\"=dword:00000001\" | Out-File $reg -Append",
    "  Start-Process -Wait $reg",
    "  Remove-Item $reg",
    "}"
  ],
  "post_install": [
    "if(-not (Test-Path -Path Registry::HKEY_CURRENT_USER\\Software\\Classes\\Applications\\Hidemaru.exe)) {",
    "  reg.exe import \"$env:USERPROFILE\\scoop\\apps\\hidemaru\\current\\install-file-associations.reg\"",
    "}",
    "if(-not (Test-Path -Path HKCU\\Software\\Classes\\SystemFileAssociations\\image\\OpenWithList\\i_view64.exe)) {",
    "  New-Item -Path HKCU:\\SOFTWARE\\Classes\\Applications\\i_view64.exe\\shell\\open\\command -Force | Out-Null",
    "  Set-ItemProperty -Path HKCU:\\SOFTWARE\\Classes\\Applications\\i_view64.exe\\shell\\open\\command -Name \"(default)\" -Value \"`\"$(scoop prefix irfanview)\\i_view64.exe`\" `\"%1`\"\"",
    "  New-Item -Path HKCU:\\SOFTWARE\\Classes\\SystemFileAssociations\\image\\OpenWithList\\i_view64.exe -Force | Out-Null",
    "}",
    "if(-not (Test-Path -Path HKCU\\Software\\Classes\\SystemFileAssociations\\video\\OpenWithList\\mpc-hc64.exe)) {",
    "  New-Item -Path HKCU:\\SOFTWARE\\Classes\\Applications\\mpc-hc64.exe\\shell\\open\\command -Force | Out-Null",
    "  Set-ItemProperty -Path HKCU:\\SOFTWARE\\Classes\\Applications\\mpc-hc64.exe\\shell\\open\\command -Name \"(default)\" -Value \"`\"$(scoop prefix mpc-hc-fork)\\mpc-hc64.exe`\" `\"%1`\"\"",
    "  New-Item -Path HKCU:\\SOFTWARE\\Classes\\SystemFileAssociations\\video\\OpenWithList\\mpc-hc64.exe -Force | Out-Null",
    "  New-Item -Path HKCU:\\SOFTWARE\\Classes\\SystemFileAssociations\\audio\\OpenWithList\\mpc-hc64.exe -Force | Out-Null",
    "}",
    "if(-not ((Get-Content $env:USERPROFILE\\Documents\\WindowsPowerShell\\profile.ps1 -Raw -ErrorAction:SilentlyContinue) -match 'conda.exe')) {",
    "  conda init",
    "  conda config --set auto_activate_base false",
    "}"
  ],
  "pre_update": {
    "autohotkey": [
      "$ahk=@\"",
      "DetectHiddenWindows true",
      "list:=WinGetList(\"ahk_exe AutoHotkey64.exe ahk_class AutoHotkey\")",
      "Loop list.length",
      "{",
      "    If A_ScriptHwnd != list[A_Index]",
      "    {",
      "        ; WM_COMMAND exit_in_popupmenu",
      "        PostMessage 0x111, 65307, 0, , list[A_Index]",
      "    }",
      "}",
      "\"@",
      "echo $ahk | autohotkey.exe *"
    ],
    "hidemaru": [
      "$ahk=@\"",
      "DetectHiddenWindows true",
      "try {",
      "    hwnd:=WinGetID(\"秀丸エディタ ahk_class Hidemaru32Class\")",
      "} catch TargetError {",
      "    ExitApp",
      "}",
      "PostMessage 0x111, 11, 0, , hwnd ; 全終了",
      "PostMessage 0x111, 4098, 0, , hwnd ; 常駐終了",
      "\"@",
      "$OutputEncoding = [System.Text.UTF8Encoding]::new($False)",
      "Write-Output $ahk | autohotkey.exe *"
    ],
    "manictime": [
      "Stop-Process (Get-Process ManicTime)"
    ],
    "powertoys": [
      "$ahk=@\"",
      "DetectHiddenWindows true",
      "try {",
      "    hwnd:=WinGetID(\"PToyTrayIconWindow ahk_class PToyTrayIconWindow\")",
      "} catch TargetError {",
      "    ExitApp",
      "}",
      "; WM_COMMAND exit_in_popupmenu",
      "PostMessage 0x111, 40001, 0, , hwnd",
      "\"@",
      "echo $ahk | autohotkey.exe *"
    ],
    "sysinternals": [
      "$ahk=@\"",
      "DetectHiddenWindows true",
      "try {",
      "    hwnd:=WinGetID(\"Process Explorer ahk_class PROCEXPLORER\")",
      "} catch TargetError {",
      "    ExitApp",
      "}",
      "; WM_COMMAND exit_in_popupmenu",
      "PostMessage 0x111, 40001, 0, , hwnd",
      "\"@",
      "echo $ahk | autohotkey.exe *"
    ]
  },
  "post_update": {
    "autohotkey": [
      "$startup=\"$env:APPDATA\\Microsoft\\Windows\\Start Menu\\Programs\\Startup\"",
      "Get-ChildItem $startup |",
      "  Where-Object {$_.Name -match \"\\.ahk\\.\"} |",
      "  ForEach-Object { & \"$startup\\$($_.Name)\" }"
    ],
    "hidemaru": [
      "hmresident.exe"
    ],
    "git": [
      "Invoke-Elevated {",
      "  Compress-ProcessMitigation;",
      "  Add-ASLRProcessMitigation \"$env:USERPROFILE\\scoop\\apps\\git\\$((((scoop info git).Installed) -split '\\n')[-1])\"",
      "}"
    ],
    "manictime": [
      "& \"$(scoop prefix manictime)\\ManicTimeClient.exe\""
    ],
    "powertoys": [
      "$exe=\"powertoys.mousewithoutborders.exe\"",
      "$raw_version=(scoop info powertoys).Version",
      "if($raw_version -match \"(.*) \\(Update to (.*) available\\)\")",
      "{",
      "    $version=$Matches[1]",
      "} else {",
      "    $version=$raw_version",
      "}",
      "$prefix=(scoop prefix powertoys)",
      "$program=\"$($prefix -replace 'current',$version)\\$exe\"",
      "Invoke-Elevated {",
      "    $exe,$program=$Args;",
      "    Get-NetFirewallApplicationFilter -Program \"*$exe\" |",
      "    Where-Object { $_.Program -notmatch 'current' } |",
      "    Get-NetFirewallRule |",
      "    Set-NetFirewallRule -Program $program",
      "} $exe,$program",
      "& \"$env:USERPROFILE\\scoop\\apps\\powertoys\\current\\PowerToys.exe\""
    ],
    "sysinternals": [
      "procexp64.exe"
    ]
  }
}
